//O(n^2) time complexity
import java.io.*;
import java.util.* ;

import java.util.ArrayList;

public class Solution {

	public static int LongestSubsetWithZeroSum(ArrayList<Integer> arr) {
		int len = 0;
		for(int i = 0; i < arr.size(); i++){
			int sum = 0;
			for(int j = i; j < arr.size(); j++){
				sum+= arr.get(j);
				if(sum == 0){
					len = Math.max(len, j- i + 1);
				}
			}
		}
		return len;
	}
}







//O(n), O(n) optimal when array consists of negatives and zero

//{ Driver Code Starts
import java.util.*;

class MaxLenZeroSumSub
{

    // Returns length of the maximum length subarray with 0 sum

    // Drive method
    public static void main(String arg[])
    {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T > 0)
        {
            int n = sc.nextInt();
            int arr[] = new int[n];
            for (int i = 0; i < n; i++)
                arr[i] = sc.nextInt();

            GfG g = new GfG();
            System.out.println(g.maxLen(arr, n));
            T--;
        }
    }
}
// } Driver Code Ends


class GfG
{
    int maxLen(int arr[], int n)
    {
        // Your code here
        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
        int sum = 0, maxlength = 0;
        for(int i = 0; i < n; i++){
            sum+= arr[i];
            if(sum == 0){
                maxlength = Math.max(maxlength, i + 1);
            }
            else{
                int rem = sum;
                if(hm.containsKey(rem)){
                    maxlength = Math.max(maxlength, i - hm.get(rem));
                }
            }
            if(hm.containsKey(sum) == false){
                hm.put(sum, i);
            }
        }
        return maxlength;
    }
}
