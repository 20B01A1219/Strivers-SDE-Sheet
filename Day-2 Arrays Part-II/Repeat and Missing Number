public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int[] repeatedNumber(final int[] A) {
        int[] hash = new int[A.length + 1];
        Arrays.fill(hash, 0);
        for(int i = 0; i < A.length; i++){
            hash[A[i]]++;
        }       
        int mis = -1, rep = -1; 
        for(int i = 1; i < A.length + 1; i++){
            if(hash[i] == 0){
                mis = i;
            }
            if(hash[i] == 2){
                rep = i;
            }
            if(mis != -1 && rep != -1)
                break;
        }
        return new int[]{rep, mis};
    }
}



//optimal solution
import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution {

    public static int[] missingAndRepeating(ArrayList<Integer> arr, int n) {
        // Write your code here
        long sumofn = (n * (n + 1)) / 2;
        long sumofn2 = (n * (n + 1) * (2 * n + 1))/6;
        long arrsum = 0;
        long arrsum2 = 0;
        for(int i = 0; i < arr.size(); i++){
            arrsum += arr.get(i);
            arrsum2 += ((long)arr.get(i) * (long)arr.get(i));
        }
        long val1 = arrsum - sumofn;
        long val2 = arrsum2 - sumofn2;
        val2 = val2 / val1;
        long x = (val1 + val2) / 2;
        long y = val2 - x;
        return (new int[]{(int)y, (int)x});
    }
}
