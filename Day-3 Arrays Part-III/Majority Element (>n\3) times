//BETTER APPROACH

import java.io.*;
import java.util.* ;

import java.util.ArrayList;

public class Solution 
{
    public static ArrayList<Integer> majorityElementII(ArrayList<Integer> arr) 
    {
        ArrayList<Integer> li = new ArrayList<Integer>();
        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
        for(int i = 0; i < arr.size(); i++){
            int value = hm.getOrDefault(arr.get(i), 0);
            hm.put(arr.get(i), value + 1);
        }
        for(Map.Entry<Integer, Integer> h : hm.entrySet()){
            if(h.getValue() > arr.size() / 3)
             li.add(h.getKey());  
        }
        return li;
    }
}



// oPTIMAL
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int ele1 = Integer.MAX_VALUE, cnt1 = 0;
        int ele2 = Integer.MAX_VALUE, cnt2 = 0;
        for(int i = 0; i < nums.length; i++){
            if(cnt1 == 0 && nums[i] != ele2){
                ele1 = nums[i];
                cnt1++;
            }
            else if(cnt2 == 0  && nums[i] != ele1){
                 ele2 = nums[i];
                cnt2++;
            }
            else if(nums[i] == ele1) cnt1++;
            else if(nums[i] == ele2) cnt2++;
            else{
                cnt1--;
                cnt2--;
            }
        }
        int ans1 = 0, ans2 = 0;
        ArrayList<Integer> li = new ArrayList<Integer>();
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == ele1){
                ans1++;
            }
            if(nums[i] == ele2){
                ans2++;
            }
        }
        if(ans1 > (nums.length) / 3)
            li.add(ele1);
        if(ans2 > (nums.length) / 3)
            li.add(ele2);
        return li;
    }
}
