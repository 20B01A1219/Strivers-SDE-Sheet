// Exponentioal
class Solution {
    int calpaths(int i , int j, int m, int n){
        if(i >= m || j >= n)
            return 0;
        if(i == m-1 && j == n-1)
            return 1;
        int left = calpaths(i+1, j, m, n);
        int right = calpaths(i, j + 1, m,n);
        return left + right;
    }
    public int uniquePaths(int m, int n) {
        return calpaths(0,0, m,n);
    }
}

//Optimal
import java.util.* ;
import java.io.*; 
public class Solution {
	 static int calpaths(int i , int j, int m, int n, int[][] dp){
        if(i >= m || j >= n)
            return 0;
        if(i == m-1 && j == n-1)
            return 1;
        if(dp[i][j] != - 1){
            return dp[i][j];
        }
        int left = calpaths(i+1, j, m, n, dp);
        int right = calpaths(i, j + 1, m,n, dp);
        dp[i][j] = left + right;
        return dp[i][j];
    }
	public static int uniquePaths(int m, int n) {
		// Write your code here.
		int[][] dp = new int[m][n];
        for(int i = 0; i < m; i++){
            Arrays.fill(dp[i], -1);
        }
        return calpaths(0,0, m,n, dp);
	}
}
