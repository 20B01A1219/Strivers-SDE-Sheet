//Better
class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
        Integer k = 1;
        for(int i = 0; i < nums.length; i++){
           int val = hm.getOrDefault(nums[i], 0);
           hm.put(nums[i] , val + 1);
        }
        for(Map.Entry<Integer, Integer> hmo: hm.entrySet()){
            if(hmo.getValue() > nums.length / 2)
             return hmo.getKey();
        }
        return -1;
    }
}


//OPtimal
import java.io.*;
import java.util.* ;

public class Solution {
	public static int findMajority(int[] arr, int n) {
		// Write your code here.
		int ele = -1, cnt = 0;
		for(int i = 0; i < n; i++){
			if(cnt == 0){
				ele = arr[i];
				cnt++;
			}
			else if(arr[i] == ele){
				cnt++;
			}
			else{
				cnt--;
			}
			
		}
		int ans = 0;
		for(int i = 0; i < n; i++){
			if(arr[i] == ele){
				ans++;
			}
		}
		if(ans > n / 2){
			return ele;
		}
		return -1;
	}
}
