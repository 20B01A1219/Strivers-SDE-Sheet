// brute force code 
//O((n*m)+(n*m * (n+m)+(n*m)) 
class Solution {
    public void setZeroes(int[][] matrix) {
        int[][] res = new int [matrix.length][matrix[0].length];
        for(int i = 0; i < matrix.length; i++){
            for(int j = 0;  j < matrix[0].length; j++){
               res[i][j] = matrix[i][j];
            }
        }
        for(int i = 0; i < matrix.length; i++){
            for(int j = 0; j < matrix[0].length; j++){
                if(matrix[i][j] == 0){
                    for(int k = 0; k < matrix[0].length;k++)
                       res[i][k] = 0;
                    for(int k = 0; k < matrix.length;k++)
                       res[k][j] = 0;
                    
                }
            }
        }
        for(int i = 0; i < matrix.length; i++){
            for(int j = 0; j < matrix[0].length; j++){
                matrix[i][j] = res[i][j];
            }
        }
    }
}




//Better Approach
//O(n*m + n*m), O(n + m)

import java.util.* ;
import java.io.*; 
public class Solution {
    public static ArrayList<ArrayList<Integer>> zeroMatrix(ArrayList<ArrayList<Integer>> matrix, Integer n, Integer m) {
    	  ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        int[] row = new int[n];
        int[] col = new int[m];
        Arrays.fill(row, 0);
        Arrays.fill(col, 0);
        for(int i = 0; i < n; i++){
            res.add(new ArrayList<Integer>());
            for(int j = 0;  j < m; j++){
              res.get(i).add(matrix.get(i).get(j));
              if(matrix.get(i).get(j) == 0){
                  row[i] = 1;
                  col[j] = 1;
              }
            }
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(row[i] == 1 || col[j] == 1){
                    res.get(i).set(j, 0);
                }
            }
        }
       

        return res;
    }
}
